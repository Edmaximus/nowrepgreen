name: ğŸš€ Dev Branch Deployment (Fly.io)

on:
  push:
    branches:
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    environment: nowrepgreen-e197-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 20.x

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  typecheck:
    name: TypeScript typecheck
    runs-on: ubuntu-latest
    environment: nowrepgreen-e197-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 20.x

      - name: Install dependencies
        run: npm install

      - name: Type check
        run: npm run typecheck
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TRIGGER_API_KEY: ${{ secrets.TRIGGER_API_KEY }}
          TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
          SYNC_SECRET_KEY: ${{ secrets.SYNC_SECRET_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          # DOMAIN: ${{ secrets.DOMAIN }}

  unit-tests:
    name: Unit Tests (Vitest)
    runs-on: ubuntu-latest
    environment: nowrepgreen-e197-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 20.x

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test -- --coverage
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TRIGGER_API_KEY: ${{ secrets.TRIGGER_API_KEY }}
          TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
          SYNC_SECRET_KEY: ${{ secrets.SYNC_SECRET_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          # DOMAIN: ${{ secrets.DOMAIN }}

  integration-tests:
    name: Integration Tests (Vitest)
    runs-on: ubuntu-latest
    environment: nowrepgreen-e197-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 20.x

      - name: Install dependencies
        run: npm install

      - name: Debug environment variables
        run: |
          echo "TARGET_API_URL exists: ${{ secrets.TARGET_API_URL != '' }}"
          echo "All environment variables:"
          env | grep -v -E "^(PATH|HOME|GITHUB_|RUNNER_|ACTIONS_|LEIN_|JAVA_|SELENIUM_|CHROMEDRIVER_|DISPLAY)"

      - name: Modify test setup for CI
        run: |
          # Create a backup of the original file
          cp test/setup-integration-env.ts test/setup-integration-env.ts.bak

          # Replace the file with a version that uses hardcoded values in CI
          cat > test/setup-integration-env.ts << 'EOF'
          // CI-friendly version with hardcoded values
          const requiredEnvVars = [
            'TARGET_API_URL',
            'SOURCE_API_URL',
            // Add other required vars here
          ];

          // Check if we're in CI environment
          const isCI = process.env.CI === 'true';

          if (isCI) {
            // In CI, use hardcoded values
            process.env.TARGET_API_URL = 'https://nowrepgreen-e197-staging.fly.dev';
            process.env.SOURCE_API_URL = 'https://nowrepblue-e197-staging.fly.dev';

            // Set DATABASE_URL for Prisma in CI
            process.env.DATABASE_URL = 'file::memory:?cache=shared';

            console.log('Using hardcoded URLs for CI environment');
          } else {
            // In local development, check for environment variables
            for (const envVar of requiredEnvVars) {
              if (!process.env[envVar]) {
                throw new Error(`Required environment variable ${envVar} is not set`);
              }
            }
          }
          EOF

          # Show the modified file
          echo "Modified test/setup-integration-env.ts:"
          cat test/setup-integration-env.ts

      - name: Create test database schema
        run: |
          # Create a script to run migrations on the in-memory database
          cat > setup-test-db.js << 'EOF'
          import { execSync } from 'child_process';

          // Set the DATABASE_URL for the in-memory database
          process.env.DATABASE_URL = 'file::memory:?cache=shared';

          console.log('Running Prisma migrations on in-memory database...');

          try {
            // Generate Prisma client with the current schema
            execSync('npx prisma generate', { stdio: 'inherit' });

            // Push the schema to the in-memory database (creates all tables)
            execSync('npx prisma db push --force-reset', { stdio: 'inherit' });

            console.log('Database schema created successfully');
          } catch (error) {
            console.error('Error setting up test database:', error);
            process.exit(1);
          }
          EOF

          # Run the script to set up the database
          node setup-test-db.js

      - name: Run tests
        run: npm run test:i:ci
        env:
          DATABASE_URL: "file::memory:?cache=shared"
          TRIGGER_API_KEY: ${{ secrets.TRIGGER_API_KEY }}
          TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
          SYNC_SECRET_KEY: ${{ secrets.SYNC_SECRET_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          TARGET_API_URL: ${{ secrets.TARGET_API_URL }}
          SOURCE_API_URL: ${{ secrets.SOURCE_API_URL }}
          # DOMAIN: ${{ secrets.DOMAIN }}

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [lint, typecheck, unit-tests, integration-tests]
    # only deploy branches on pushes for now
    if: ${{ github.ref == 'refs/heads/dev' && github.event_name == 'push'}}
    environment: ${{ github.ref == 'refs/heads/dev' && 'nowrepgreen-e197-staging'}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read app name
        uses: SebRollen/toml-action@v1.2.0
        id: app-name
        with:
          file: fly.toml
          field: app

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Verify Fly CLI authentication
        run: flyctl auth whoami
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # Create a snapshot of the volume before deployment
      - name: Create pre-deployment backup
        run: |
          # Get current timestamp for the snapshot name
          TIMESTAMP=$(date +%Y%m%d%H%M%S)

          # Create a new snapshot
          flyctl volumes snapshot create data --app ${{ steps.app-name.outputs.value }}-staging --snapshot-name "pre-deploy-$TIMESTAMP"

          # List all snapshots
          SNAPSHOTS=$(flyctl volumes snapshots list data --app ${{ steps.app-name.outputs.value }}-staging --json)

          # Keep only the most recent snapshot (delete others)
          echo "$SNAPSHOTS" | jq -r '.[] | select(.name | startswith("pre-deploy-")) | .id' | sort | head -n -1 | while read -r SNAPSHOT_ID; do
            if [ ! -z "$SNAPSHOT_ID" ]; then
              echo "Deleting old snapshot: $SNAPSHOT_ID"
              flyctl volumes snapshots destroy "$SNAPSHOT_ID" --app ${{ steps.app-name.outputs.value }}-staging --yes
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Deploy Dev Branch
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: flyctl deploy --remote-only --build-arg COMMIT_SHA=${{ github.sha }} --app ${{ steps.app-name.outputs.value }}-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TRIGGER_API_KEY: ${{ secrets.TRIGGER_API_KEY }}
          TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
          SYNC_SECRET_KEY: ${{ secrets.SYNC_SECRET_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          TARGET_API_URL: ${{ secrets.TARGET_API_URL }}
          SOURCE_API_URL: ${{ secrets.SOURCE_API_URL }}
          # DOMAIN: ${{ secrets.DOMAIN }}

      - name: Deploy Trigger.dev
        if: ${{ github.ref == 'refs/heads/dev' }}
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: npx trigger.dev@latest deploy
